// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    And(a=true, b=instruction[15], out=instrc);

    Not(in=instrc, out=instra);
    And(a=instruction[5], b=instrc, out=desta);
    Or(a=instra, b=instruction[5], out=writea);

    And(a=instruction[3], b=instrc, out=writeM);
    And(a=instruction[4], b=instrc, out=writed);

    Mux16(a=aluout, b=instruction, sel=instra, out=sela);
    ARegister(in=sela, load=writea, out=rega, out[0..14]=addressM);

    Mux16(a=rega, b=inM, sel=instruction[12], out=regmem);

    ALU(x=regd, y=regmem, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, out=outM, zr=outzero, ng=outneg);

    DRegister(in=aluout, load=writed, out=regd);

    And(a=instruction[2], b=instruction[1], out=j12);
    And(a=j12, b=instruction[0], out=j123);

    Not(in=outzero, out=notzero);
    Not(in=outneg, out=outpos);
    And(a=notzero, b=outpos, out=gt);
    And(a=notzero, b=outneg, out=lt);

    And(a=lt, b=instruction[2], out=isjlt);
    And(a=outzero, b=instruction[1], out=isjeq);
    And(a=gt, b=instruction[0], out=isjgt);

    Or8Way(in[0]=isjlt, in[1]=isjeq, in[2]=isjgt, out=iscond);
    Or(a=iscond, b=j123, out=isjump);

    And(a=instrc, b=isjump, out=isactualjump);
    Not(in=isactualjump, out=isnext);

    PC(in=rega, load=isactualjump, inc=isnext, reset=reset, out[0..14]=pc);
}
